import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  Tool,
} from "@modelcontextprotocol/sdk/types.js";

// Define the server information
const SERVER_INFO = {
  name: "simple-arithmetic-server",
  version: "1.0.0",
};

// Define available tools
const TOOLS: Tool[] = [
  {
    name: "add",
    description: "Add two numbers together",
    inputSchema: {
      type: "object",
      properties: {
        a: { type: "number", description: "First number" },
        b: { type: "number", description: "Second number" },
      },
      required: ["a", "b"],
    },
  },
  {
    name: "subtract",
    description: "Subtract second number from first number",
    inputSchema: {
      type: "object",
      properties: {
        a: { type: "number", description: "First number" },
        b: { type: "number", description: "Second number" },
      },
      required: ["a", "b"],
    },
  },
  {
    name: "multiply",
    description: "Multiply two numbers",
    inputSchema: {
      type: "object",
      properties: {
        a: { type: "number", description: "First number" },
        b: { type: "number", description: "Second number" },
      },
      required: ["a", "b"],
    },
  },
  {
    name: "divide",
    description: "Divide first number by second number",
    inputSchema: {
      type: "object",
      properties: {
        a: { type: "number", description: "First number (dividend)" },
        b: { type: "number", description: "Second number (divisor)" },
      },
      required: ["a", "b"],
    },
  },
  {
    name: "power",
    description: "Raise first number to the power of second number",
    inputSchema: {
      type: "object",
      properties: {
        base: { type: "number", description: "Base number" },
        exponent: { type: "number", description: "Exponent" },
      },
      required: ["base", "exponent"],
    },
  },
];

// Create the server
const server = new Server(SERVER_INFO, {
  capabilities: {
    tools: {},
  },
});

// Handle tool listing
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: TOOLS,
  };
});

// Handle tool execution
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case "add": {
        const { a, b } = args as { a: number; b: number };
        const result = a + b;
        return {
          content: [
            {
              type: "text",
              text: `${a} + ${b} = ${result}`,
            },
          ],
        };
      }

      case "subtract": {
        const { a, b } = args as { a: number; b: number };
        const result = a - b;
        return {
          content: [
            {
              type: "text",
              text: `${a} - ${b} = ${result}`,
            },
          ],
        };
      }

      case "multiply": {
        const { a, b } = args as { a: number; b: number };
        const result = a * b;
        return {
          content: [
            {
              type: "text",
              text: `${a} ร ${b} = ${result}`,
            },
          ],
        };
      }

      case "divide": {
        const { a, b } = args as { a: number; b: number };
        if (b === 0) {
          return {
            content: [
              {
                type: "text",
                text: "Error: Division by zero is not allowed",
              },
            ],
            isError: true,
          };
        }
        const result = a / b;
        return {
          content: [
            {
              type: "text",
              text: `${a} รท ${b} = ${result}`,
            },
          ],
        };
      }

      case "power": {
        const { base, exponent } = args as { base: number; exponent: number };
        const result = Math.pow(base, exponent);
        return {
          content: [
            {
              type: "text",
              text: `${base}^${exponent} = ${result}`,
            },
          ],
        };
      }

      default:
        return {
          content: [
            {
              type: "text",
              text: `Unknown tool: ${name}`,
            },
          ],
          isError: true,
        };
    }
  } catch (error) {
    return {
      content: [
        {
          type: "text",
          text: `Error executing tool ${name}: ${error}`,
        },
      ],
      isError: true,
    };
  }
});

// Start the server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Simple MCP Arithmetic Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});